# coding: utf-8

"""
    pharos.com) - Identity Assertion

    Defines the Identity Assertion endpoints exposed by a server.

    The version of the OpenAPI document: 1.0.0
    Contact: contact@pharos.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IdentityAssertionResponse(BaseModel):
    """
    IdentityAssertionResponse
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences")
    given_name: Optional[StrictStr] = Field(default=None, description="Given name(s) or first name(s) of the End-User")
    family_name: Optional[StrictStr] = Field(default=None, description="Surname(s) or last name(s) of the End-User")
    middle_name: Optional[StrictStr] = Field(default=None, description="Middle name(s) of the End-User")
    nickname: Optional[StrictStr] = Field(default=None, description="Casual name of the End-User that may or may not be the same as the given_name")
    preferred_username: Optional[StrictStr] = Field(default=None, description="Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe")
    email: Optional[StrictStr] = Field(default=None, description="End-User's preferred e-mail address")
    __properties: ClassVar[List[str]] = ["name", "given_name", "family_name", "middle_name", "nickname", "preferred_username", "email"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IdentityAssertionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IdentityAssertionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "given_name": obj.get("given_name"),
            "family_name": obj.get("family_name"),
            "middle_name": obj.get("middle_name"),
            "nickname": obj.get("nickname"),
            "preferred_username": obj.get("preferred_username"),
            "email": obj.get("email")
        })
        return _obj


